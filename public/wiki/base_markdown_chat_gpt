curl --request PUT \
  --url 'https://api.spotify.com/v1/me/albums?ids=382ObEPsp2rxGrnsizN5TX%2C1A2GTWGtFfWp7KSQTwWOyo%2C2noRn2Aes5aoNVsU6iWThc' \
  --header 'Authorization: Bearer 1POdFZRZbvb...qqillRxMr2z' \
  --header 'Content-Type: application/json' \
  --data '{
    "ids": [
        "string"
    ]
}'



# Documentação da API: Cadastro de Nova Instituição

## Endpoint

### `POST /api/v1/orgs`

Este endpoint permite o cadastro de uma nova instituição.

- **Tags:** Organizações
- **Resumo:** Cadastro
- **Descrição:** Cadastro de Nova Organização

## Request

### Request Body

O corpo da solicitação deve ser enviado nos seguintes formatos: JSON, XML, YAML.

#### Conteúdo do Corpo da Solicitação

O corpo da solicitação deve seguir o esquema definido por `OrgEntryData`.

#### Esquema de Dados: `OrgEntryData`

```json
{
  "nome": "string",
  "credenciais": "UserCredentialsProjectionEntryData",
  "cnpj": "string",
  "instituicao_de_ensino": "boolean",
  "info": "string",
  "contato_principal": "ContactWithoutType",
  "contato_candidaturas": "ContactWithoutType",
  "endereco": "AddressWithoutType",
  "website": "string",
  "redes_sociais": [
    "string"
  ],
  "id": "string"
}

    nome: Nome da Organização (exemplo: "Nobanks")
    credenciais: Dados de credenciais do usuário (opcional)
    cnpj: CNPJ válido da organização (exemplo: "18009962000177")
    instituicao_de_ensino: Indica se é uma instituição de ensino (true ou false)
    info: Informações sobre a organização (exemplo: "Uma organização sem bancos")
    contato_principal: Contato principal (opcional)
    contato_candidaturas: Contato para candidaturas (opcional)
    endereco: Endereço da organização (opcional)
    website: Website da organização (opcional)
    redes_sociais: Redes sociais da organização (opcional)
    id: Identificador único da organização (somente leitura)

Respostas
Sucesso (201 Created)
Conteúdo da Resposta

O sucesso da criação da organização retornará um objeto seguindo o esquema OrgPrivateProfile.
Esquema de Dados: OrgPrivateProfile

json

{
  "id": "string",
  "nome": "string",
  "credenciais": "UserCredentialsProjectionResponse",
  "cnpj": "string",
  "instituicao_de_ensino": "boolean",
  "info": "string",
  "contato_principal": "ContactWithoutType",
  "contato_candidaturas": "ContactWithoutType",
  "endereco": "AddressWithoutType",
  "website": "string",
  "redes_sociais": [
    "string"
  ],
  "criado_em": "string",
  "atualizado_em": "string"
}

    id: Identificador único da organização
    nome: Nome da organização
    credenciais: Dados de credenciais do usuário
    cnpj: CNPJ válido da organização
    instituicao_de_ensino: Indica se é uma instituição de ensino
    info: Informações sobre a organização
    contato_principal: Contato principal
    contato_candidaturas: Contato para candidaturas
    endereco: Endereço da organização
    website: Website da organização
    redes_sociais: Redes sociais da organização
    criado_em: Data e hora de criação
    atualizado_em: Data e hora da última atualização

Erros

    400 Bad Request: Solicitação inválida. Verifique o formato e os dados enviados.
    401 Unauthorized: Falta de autenticação. Verifique suas credenciais.
    403 Forbidden: Acesso negado. Você não tem permissão para criar uma organização.
    404 Not Found: O recurso solicitado não foi encontrado.
    500 Internal Server Error: Erro interno no servidor.

Exemplos de Solicitação e Resposta
Exemplo de Solicitação

http

POST /api/v1/orgs HTTP/1.1
Content-Type: application/json

{
  "nome": "Nobanks",
  "cnpj": "18009962000177",
  "instituicao_de_ensino": false,
  "info": "Uma organização sem bancos",
  "contato_principal": {
    "email": "contato@nobanks.com",
    "telefone": "1234567890"
  },
  "contato_candidaturas": {
    "email": "candidaturas@nobanks.com",
    "telefone": "0987654321"
  },
  "endereco": {
    "logradouro": "Rua Exemplo",
    "numero": "123",
    "bairro": "Centro",
    "cidade": "Cidade Exemplo",
    "estado": "EX",
    "cep": "12345-678"
  },
  "website": "https://nobanks.com",
  "redes_sociais": [
    "https://twitter.com/nobanks",
    "https://facebook.com/nobanks"
  ]
}

Exemplo de Resposta

json

{
  "id": "abc123",
  "nome": "Nobanks",
  "cnpj": "18009962000177",
  "instituicao_de_ensino": false,
  "info": "Uma organização sem bancos",
  "contato_principal": {
    "email": "contato@nobanks.com",
    "telefone": "1234567890"
  },
  "contato_candidaturas": {
    "email": "candidaturas@nobanks.com",
    "telefone": "0987654321"
  },
  "endereco": {
    "logradouro": "Rua Exemplo",
    "numero": "123",
    "bairro": "Centro",
    "cidade": "Cidade Exemplo",
    "estado": "EX",
    "cep": "12345-678"
  },
  "website": "https://nobanks.com",
  "redes_sociais": [
    "https://twitter.com/nobanks",
    "https://facebook.com/nobanks"
  ],
  "criado_em": "2024-01-01T12:00:00Z",
  "atualizado_em": "2024-01-01T12:00:00Z"
}

Esta documentação fornece uma visão geral detalhada sobre como usar o endpoint para cadastrar uma nova instituição, incluindo os dados necessários, possíveis respostas e exemplos práticos.











# Documentação da API: Autenticação e Autorização com JWT Tokens

## Endpoints

### 1. `POST /api/v1/auth/login`

Autentica o usuário e retorna tokens de acesso e de atualização.

- **Tags:** Autenticação
- **Operação:** `login`
- **Descrição:** Realiza o login do usuário e retorna tokens JWT.

#### Request

O corpo da solicitação deve seguir o esquema `AuthLoginRequest`.

##### Esquema de Dados: `AuthLoginRequest`

```json
{
  "email": "string",
  "password": "string"
}

    email: Endereço de e-mail do usuário (obrigatório).
    password: Senha do usuário (obrigatório).

Respostas

    200 OK: Retorna tokens de autenticação.
    400 Bad Request: Solicitação inválida. Verifique o formato e os dados enviados.
    401 Unauthorized: Credenciais inválidas.
    403 Forbidden: Acesso negado.
    404 Not Found: O recurso solicitado não foi encontrado.
    500 Internal Server Error: Erro interno no servidor.

Exemplo de Resposta

json

{
  "status": "success",
  "data": {
    "access_token": "string",
    "refresh_token": "string"
  }
}

2. POST /api/v1/auth/refresh_token

Renova o token de acesso usando o token de atualização.

    Tags: Autenticação
    Operação: refreshToken
    Descrição: Gera um novo token de acesso utilizando o token de atualização fornecido.

Request

O corpo da solicitação deve seguir o esquema AuthToken.
Esquema de Dados: AuthToken

json

{
  "access_token": "string",
  "refresh_token": "string"
}

    access_token: Token de acesso atual (opcional, mas recomendado para renovação).
    refresh_token: Token de atualização (obrigatório).

Respostas

    200 OK: Retorna novos tokens de autenticação.
    400 Bad Request: Solicitação inválida. Verifique o formato e os dados enviados.
    401 Unauthorized: Token de atualização inválido ou expirado.
    403 Forbidden: Acesso negado.
    404 Not Found: O recurso solicitado não foi encontrado.
    500 Internal Server Error: Erro interno no servidor.

Exemplo de Resposta

json

{
  "status": "success",
  "data": {
    "access_token": "string",
    "refresh_token": "string"
  }
}

Esquemas de Dados
AuthToken

json

{
  "access_token": "string",
  "refresh_token": "string"
}

    access_token: Token de acesso JWT (somente leitura).
    refresh_token: Token de atualização JWT.

SuccessResponseAuthToken

json

{
  "status": "string",
  "data": "AuthToken"
}

    status: Status da resposta (exemplo: "success").
    data: Dados contendo tokens de autenticação (AuthToken).

AuthLoginRequest

json

{
  "email": "string",
  "password": "string"
}

    email: Endereço de e-mail do usuário (somente gravação).
    password: Senha do usuário (somente gravação).

Notas

    Tokens de Acesso: Utilizados para autenticação em endpoints protegidos.
    Tokens de Atualização: Utilizados para obter novos tokens de acesso quando o token atual expira.

Esta documentação fornece uma visão geral detalhada sobre como usar os endpoints para autenticação e autorização com JWT tokens, incluindo os dados necessários, possíveis respostas e exemplos práticos.










# Documentação da API: Vagas

## Endpoints

### 1. `POST /api/v1/vagas`

Cria uma nova vaga de estágio.

- **Tags:** Vagas
- **Operação:** `postVaga`
- **Descrição:** Permite criar uma nova vaga de estágio.

#### Request

O corpo da solicitação deve seguir o esquema `JobEntryData`.

##### Esquema de Dados: `JobEntryData`

```json
{
  "titulo": "string",
  "descricao": "string",
  "requisitos": [
    "string"
  ],
  "areas_ids": [
    "string"
  ],
  "carga_horaria_semanal": "integer",
  "remuneracao": "number",
  "periodo": "string",
  "nivel": "string",
  "formato": "string",
  "duracao_meses": "integer",
  "data_inicio": "string",
  "data_fim": "string",
  "imagem_url": "string",
  "endereco_id": "string",
  "contato_id": "string",
  "destinatarios_ids": [
    "string"
  ]
}

    titulo: Título da vaga (obrigatório).
    descricao: Descrição da vaga (obrigatório).
    requisitos: Lista de requisitos para a vaga (opcional).
    areas_ids: Identificadores das áreas relacionadas à vaga (opcional).
    carga_horaria_semanal: Carga horária semanal em horas (obrigatório).
    remuneracao: Remuneração da vaga (obrigatório).
    periodo: Período da vaga (matutino, vespertino, noturno) (opcional).
    nivel: Nível educacional requerido (fundamental, medio, tecnico, graduacao, pos) (opcional).
    formato: Formato da vaga (presencial, hibrido, remoto) (opcional).
    duracao_meses: Duração da vaga em meses (opcional).
    data_inicio: Data de início do estágio (opcional).
    data_fim: Data de término do estágio (opcional).
    imagem_url: URL da imagem associada à vaga (opcional).
    endereco_id: Identificador do endereço da vaga (obrigatório).
    contato_id: Identificador do contato para candidatura (obrigatório).
    destinatarios_ids: Identificadores das instituições de ensino para as quais a vaga se destina. Se deixado em branco, a vaga será disponibilizada para todas as instituições com acesso ao sistema (opcional).

Respostas

    201 Created: Vaga criada com sucesso.
    400 Bad Request: Solicitação inválida. Verifique o formato e os dados enviados.
    401 Unauthorized: Usuário não autorizado.
    403 Forbidden: Acesso negado.
    404 Not Found: Recurso não encontrado.
    500 Internal Server Error: Erro interno no servidor.

2. GET /api/v1/org/vagas/owned

Obtém a lista de vagas criadas pela organização.

    Tags: Vagas
    Operação: getVagasCriadas
    Descrição: Retorna as vagas de estágio criadas pela organização.

Parâmetros de Consulta

    search: Termo de pesquisa para filtrar as vagas (opcional, padrão: vazio).
    limit: Número máximo de vagas a serem retornadas (opcional, padrão: 10).
    page: Número da página de resultados (opcional, padrão: 0).

Respostas

    200 OK: Lista de vagas criadas pela organização.
    400 Bad Request: Solicitação inválida. Verifique os parâmetros de consulta.
    401 Unauthorized: Usuário não autorizado.
    403 Forbidden: Acesso negado.
    404 Not Found: Recurso não encontrado.
    500 Internal Server Error: Erro interno no servidor.

Esquemas de Dados
JobEntryData

json

{
  "titulo": "string",
  "descricao": "string",
  "requisitos": [
    "string"
  ],
  "areas_ids": [
    "string"
  ],
  "carga_horaria_semanal": "integer",
  "remuneracao": "number",
  "periodo": "string",
  "nivel": "string",
  "formato": "string",
  "duracao_meses": "integer",
  "data_inicio": "string",
  "data_fim": "string",
  "imagem_url": "string",
  "endereco_id": "string",
  "contato_id": "string",
  "destinatarios_ids": [
    "string"
  ]
}

    titulo: Título da vaga.
    descricao: Descrição da vaga.
    requisitos: Lista de requisitos para a vaga.
    areas_ids: Identificadores das áreas relacionadas.
    carga_horaria_semanal: Carga horária semanal em horas.
    remuneracao: Remuneração da vaga.
    periodo: Período da vaga (matutino, vespertino, noturno).
    nivel: Nível educacional requerido (fundamental, medio, tecnico, graduacao, pos).
    formato: Formato da vaga (presencial, hibrido, remoto).
    duracao_meses: Duração da vaga em meses.
    data_inicio: Data de início do estágio.
    data_fim: Data de término do estágio.
    imagem_url: URL da imagem associada.
    endereco_id: Identificador do endereço da vaga.
    contato_id: Identificador do contato para candidatura.
    destinatarios_ids: Identificadores das instituições de ensino para as quais a vaga se destina.

css


Você pode colar esse texto em um arquivo Markdown para usar como documentação. Se precisar de mais alguma coisa, é só avisar!







Documentação da API: Moderação de Vagas
Endpoints
1. GET /api/v1/org/vagas/recebidas

Ver todas as vagas recebidas por uma instituição.

    Tags: Moderação
    Operação: getVagasRecebidas
    Descrição: Retorna todas as vagas recebidas pela instituição.

Parâmetros de Consulta

    search: Termo de pesquisa para filtrar as vagas (opcional, padrão: vazio).
    limit: Número máximo de vagas a serem retornadas (opcional, padrão: 10).
    page: Número da página de resultados (opcional, padrão: 0).

Respostas

    200 OK: Lista de vagas recebidas.
    400 Bad Request: Solicitação inválida. Verifique os parâmetros de consulta.
    401 Unauthorized: Usuário não autorizado.
    403 Forbidden: Acesso negado.
    404 Not Found: Recurso não encontrado.
    500 Internal Server Error: Erro interno no servidor.

Segurança

    Authorization: Requer autenticação.

2. PUT /api/v1/org/vagas/rejeitadas

Rejeitar uma oferta de vaga.

    Tags: Moderação
    Operação: postVagasRejeitadas
    Descrição: Permite rejeitar uma ou mais ofertas de vaga.

Request

O corpo da solicitação deve ser uma lista de identificadores de vagas a serem rejeitadas.
Exemplo de Corpo da Solicitação

json

[
  "vaga_id_1",
  "vaga_id_2"
]

Respostas

    200 OK: Vagas rejeitadas com sucesso.
    400 Bad Request: Solicitação inválida. Verifique o formato e os dados enviados.
    401 Unauthorized: Usuário não autorizado.
    403 Forbidden: Acesso negado.
    404 Not Found: Recurso não encontrado.
    500 Internal Server Error: Erro interno no servidor.

Segurança

    Authorization: Requer autenticação.

3. GET /api/v1/org/vagas/disponiveis

Ver todas as vagas aprovadas e disponíveis para a instituição.

    Tags: Moderação
    Operação: getVagasDisponiveis
    Descrição: Retorna todas as vagas aprovadas e disponíveis para a instituição.

Parâmetros de Consulta

    search: Termo de pesquisa para filtrar as vagas (opcional, padrão: vazio).
    limit: Número máximo de vagas a serem retornadas (opcional, padrão: 10).
    page: Número da página de resultados (opcional, padrão: 0).

Respostas

    200 OK: Lista de vagas aprovadas e disponíveis.
    400 Bad Request: Solicitação inválida. Verifique os parâmetros de consulta.
    401 Unauthorized: Usuário não autorizado.
    403 Forbidden: Acesso negado.
    404 Not Found: Recurso não encontrado.
    500 Internal Server Error: Erro interno no servidor.

Segurança

    Authorization: Requer autenticação.

4. PUT /api/v1/org/vagas/disponiveis

Aprovar uma oferta de vaga.

    Tags: Moderação
    Operação: postVagasAprovadas
    Descrição: Permite aprovar uma ou mais ofertas de vaga.

Request

O corpo da solicitação deve ser uma lista de identificadores de vagas a serem aprovadas.
Exemplo de Corpo da Solicitação

json

[
  "vaga_id_1",
  "vaga_id_2"
]

Respostas

    200 OK: Vagas aprovadas com sucesso.
    400 Bad Request: Solicitação inválida. Verifique o formato e os dados enviados.
    401 Unauthorized: Usuário não autorizado.
    403 Forbidden: Acesso negado.
    404 Not Found: Recurso não encontrado.
    500 Internal Server Error: Erro interno no servidor.

Segurança

    Authorization: Requer autenticação.

Esquemas de Dados
ExceptionResponse

    description: Descrição do erro.

SuccessResponseVoid

    description: Indica que a operação foi bem-sucedida sem retorno de dados.



